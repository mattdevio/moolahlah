version: 2

jobs:
  build:
    working_directory: ~/moolahlah
    docker:
      - image: circleci/node:10.13.0-stretch
      - image: mysql:5.7.24
        name: mysql
        environment:
          - MYSQL_RANDOM_ROOT_PASSWORD=yes
          - MYSQL_DATABASE=moo_test
          - MYSQL_USER=test_svc
          - MYSQL_PASSWORD=secret
      - image: redis:alpine
        name: redis
    steps:
      - checkout
      - run:
          name: Update NPM
          command: 'sudo npm install -g npm'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install NPM Modules
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build Configuration
          command: |
            npm run config \
              MAILGUN_API_KEY=${MAILGUN_API_KEY} \
              MYSQL_HOST=mysql \
              MYSQL_USERNAME=test_svc \
              MYSQL_PASSWORD=secret \
              MYSQL_DB_NAME=moo_test
      - run:
          name: Wait for MYSQL
          command: dockerize -wait tcp://mysql:3306 -timeout 1m
      - run:
          name: Wait for Redis
          command: dockerize -wait tcp://redis:6379
      - run:
          name: Run & Test Migrations
          command: |
            npx knex migrate:latest
            npx knex seed:run
      - run:
          name: Run Unit Tests
          command: npm run test

  deploy:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/moolahlah
    steps:
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Test CLI
          command: |
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --parameters "{\"commands\":[\"runuser -l ubuntu -c 'bash /home/ubuntu/deploy.sh ${CIRCLE_SHA1}'\"],\"executionTimeout\":[\"3600\"]}" \
              --timeout-seconds 600 \
              --instance-id "${INSTANCE_ID}"

workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy
